package impala_profile_decode

import (
	"encoding/json"
	"fmt"
	"testing"
)

const line = "1458322151442 4c4d52afea4a40a1:802034563d1cfc93 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"

func TestParser(t *testing.T) {
	impalaProfile, err := DecodeImpalaProfileLine(line)
	if err != nil {
		t.Error(err)
	}
	fmt.Println(impalaProfile)
	fmt.Println("-----------------------------------")
	jsonBytes, err := json.MarshalIndent(impalaProfile, "", "    ")
	if err != nil {
		t.Error(err)
	}
	fmt.Println("-----------------------------------")
	fmt.Println(string(jsonBytes))
}
